#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ PCA9685
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: Raspberry Pi 5 + PCA9685 + Servo
"""

import time
import board
import busio
from adafruit_pca9685 import PCA9685
from adafruit_motor import servo


def initialize_servo():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PCA9685 –∏ —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–∞"""
    try:
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2C...")
        i2c = busio.I2C(board.SCL, board.SDA)

        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PCA9685...")
        pca = PCA9685(i2c)
        pca.frequency = 50  # 50 –ì—Ü –¥–ª—è —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–æ–≤

        print("–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å–µ—Ä–≤–æ –Ω–∞ –∫–∞–Ω–∞–ª–µ 0...")
        servo_motor = servo.Servo(pca.channels[0])

        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return pca, servo_motor

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("1. –í–∫–ª—é—á–µ–Ω –ª–∏ I2C: sudo raspi-config")
        print("2. –ü–æ–¥–∫–ª—é—á–µ–Ω—ã –ª–∏ –ø—Ä–æ–≤–æ–¥–∞ SDA/SCL")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
        return None, None


def set_angle(servo_motor, angle):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≥–æ–ª —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–∞"""
    try:
        if 0 <= angle <= 180:
            servo_motor.angle = angle
            print(f"‚úÖ –°–µ—Ä–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ {angle}¬∞")
            return True
        else:
            print("‚ùå –£–≥–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 180 –≥—Ä–∞–¥—É—Å–æ–≤")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞: {e}")
        return False


def smooth_move(servo_motor, start_angle, end_angle, steps=20, delay=0.05):
    """–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–æ"""
    print(f"–ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç {start_angle}¬∞ –¥–æ {end_angle}¬∞...")
    step_size = (end_angle - start_angle) / steps
    current_angle = start_angle

    for i in range(steps + 1):
        angle = int(current_angle)
        servo_motor.angle = angle
        print(f"  ‚Üí {angle}¬∞", end='\r')
        current_angle += step_size
        time.sleep(delay)
    print(f"  ‚Üí {end_angle}¬∞ ‚úÖ")


def test_servo(servo_motor):
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å–µ—Ä–≤–æ"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–∞...")

    positions = [
        (90, "–¶–µ–Ω—Ç—Ä"),
        (0, "–ö—Ä–∞–π–Ω–µ–µ –ª–µ–≤–æ–µ"),
        (180, "–ö—Ä–∞–π–Ω–µ–µ –ø—Ä–∞–≤–æ–µ"),
        (90, "–í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä")
    ]

    for angle, description in positions:
        print(f"  {description} ({angle}¬∞)...")
        set_angle(servo_motor, angle)
        time.sleep(1.5)

    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")


def sweep_demo(servo_motor, cycles=3):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—á–∞–Ω–∏—è —Å–µ—Ä–≤–æ"""
    print(f"\nüîÑ –ö–∞—á–∞–Ω–∏–µ —Å–µ—Ä–≤–æ ({cycles} —Ü–∏–∫–ª–æ–≤)...")

    for cycle in range(cycles):
        print(f"  –¶–∏–∫–ª {cycle + 1}/{cycles}")
        smooth_move(servo_motor, 0, 180, steps=30, delay=0.03)
        time.sleep(0.2)
        smooth_move(servo_motor, 180, 0, steps=30, delay=0.03)
        time.sleep(0.2)

    # –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä
    smooth_move(servo_motor, 0, 90, steps=15)
    print("‚úÖ –ö–∞—á–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


def print_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  0-180    - –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É–≥–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 90)")
    print("  sweep    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–∞—á–∞–Ω–∏–µ —Ç—É–¥–∞-—Å—é–¥–∞")
    print("  test     - –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π")
    print("  help     - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
    print("  q        - –í—ã—Ö–æ–¥")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–∞ —Å PCA9685")
    print("=" * 50)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    pca, servo_motor = initialize_servo()
    if not pca or not servo_motor:
        return

    print("\nüéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ (90¬∞)...")
    set_angle(servo_motor, 90)
    time.sleep(1)

    print_help()

    try:
        while True:
            print("\n" + "-" * 30)
            command = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip().lower()

            if command == 'q' or command == 'quit':
                break

            elif command == 'help' or command == 'h':
                print_help()

            elif command == 'sweep':
                sweep_demo(servo_motor)

            elif command == 'test':
                test_servo(servo_motor)

            elif command.isdigit():
                angle = int(command)
                set_angle(servo_motor, angle)

            elif command == '':
                continue

            else:
                print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'")
                print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    finally:
        print("\nüîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        print("–í–æ–∑–≤—Ä–∞—Ç —Å–µ—Ä–≤–æ –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ...")
        set_angle(servo_motor, 90)
        time.sleep(0.5)

        print("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ PCA9685...")
        pca.deinit()
        print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()