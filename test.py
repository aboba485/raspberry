import RPi.GPIO as GPIO
import time
import threading

class MotorController:
    def __init__(self, pin1=4, pin2=5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –º–æ—Ç–æ—Ä–∞
        pin1, pin2 - –ø–∏–Ω—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        """
        self.pin1 = pin1
        self.pin2 = pin2
        self.is_running = False
        self.motor_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.pin1, GPIO.OUT)
        GPIO.setup(self.pin2, GPIO.OUT)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PWM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç—å—é
        self.pwm1 = GPIO.PWM(self.pin1, 1000)  # 1000 Hz
        self.pwm2 = GPIO.PWM(self.pin2, 1000)  # 1000 Hz
        self.pwm1.start(0)
        self.pwm2.start(0)
        
        print("ü§ñ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º–æ—Ç–æ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def forward(self, speed=100):
        """
        –í—Ä–∞—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
        speed: —Å–∫–æ—Ä–æ—Å—Ç—å 0-100%
        """
        print(f"‚û°Ô∏è  –í—Ä–∞—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}%")
        self.pwm1.ChangeDutyCycle(speed)
        self.pwm2.ChangeDutyCycle(0)
    
    def backward(self, speed=100):
        """
        –í—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
        speed: —Å–∫–æ—Ä–æ—Å—Ç—å 0-100%
        """
        print(f"‚¨ÖÔ∏è  –í—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥, —Å–∫–æ—Ä–æ—Å—Ç—å: {speed}%")
        self.pwm1.ChangeDutyCycle(0)
        self.pwm2.ChangeDutyCycle(speed)
    
    def stop(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–∞
        """
        print("üõë –ú–æ—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        self.pwm1.ChangeDutyCycle(0)
        self.pwm2.ChangeDutyCycle(0)
        self.is_running = False
    
    def spin_continuous(self, direction="forward", speed=100):
        """
        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        direction: "forward" –∏–ª–∏ "backward"
        speed: —Å–∫–æ—Ä–æ—Å—Ç—å 0-100%
        """
        if self.is_running:
            print("‚ö†Ô∏è  –ú–æ—Ç–æ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
            return
        
        self.is_running = True
        
        def spin():
            print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ ({direction}, {speed}%)")
            while self.is_running:
                if direction == "forward":
                    self.forward(speed)
                else:
                    self.backward(speed)
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        
        self.motor_thread = threading.Thread(target=spin)
        self.motor_thread.daemon = True
        self.motor_thread.start()
    
    def change_speed(self, new_speed):
        """
        –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        """
        if self.is_running:
            print(f"‚ö° –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –Ω–∞ {new_speed}%")
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ–º—É PWM
            if self.pwm1.duty_cycle > 0:
                self.pwm1.ChangeDutyCycle(new_speed)
            elif self.pwm2.duty_cycle > 0:
                self.pwm2.ChangeDutyCycle(new_speed)
        else:
            print("‚ö†Ô∏è  –ú–æ—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def reverse_direction(self):
        """
        –°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        """
        if self.is_running:
            print("üîÑ –°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
            current_speed = max(self.pwm1.duty_cycle, self.pwm2.duty_cycle)
            
            # –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            if self.pwm1.duty_cycle > 0:
                self.backward(current_speed)
            else:
                self.forward(current_speed)
        else:
            print("‚ö†Ô∏è  –ú–æ—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    def cleanup(self):
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        self.stop()
        self.pwm1.stop()
        self.pwm2.stop()
        GPIO.cleanup()
        print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –º–æ—Ç–æ—Ä–∞
    motor = MotorController()
    
    try:
        print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –ú–û–¢–û–†–ê ===")
        
        # –¢–µ—Å—Ç 1: –í—Ä–∞—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–∫–æ—Ä–æ—Å—Ç—è–º–∏
        print("\n1Ô∏è‚É£  –¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–µ–π (–≤–ø–µ—Ä–µ–¥)")
        for speed in [30, 60, 100]:
            motor.forward(speed)
            time.sleep(2)
        
        motor.stop()
        time.sleep(1)
        
        # –¢–µ—Å—Ç 2: –í—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
        print("\n2Ô∏è‚É£  –¢–µ—Å—Ç –Ω–∞–∑–∞–¥")
        motor.backward(80)
        time.sleep(3)
        
        motor.stop()
        time.sleep(1)
        
        # –¢–µ—Å—Ç 3: –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –≤ —Ñ–æ–Ω–µ
        print("\n3Ô∏è‚É£  –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ (10 —Å–µ–∫—É–Ω–¥)")
        motor.spin_continuous("forward", 70)
        
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–Ω—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        time.sleep(3)
        motor.change_speed(100)
        
        # –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        time.sleep(3)
        motor.reverse_direction()
        
        # –ï—â—ë 4 —Å–µ–∫—É–Ω–¥—ã –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        time.sleep(4)
        motor.stop()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    finally:
        motor.cleanup()

# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
def quick_spin(direction="forward", speed=100, duration=5):
    """
    –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –º–æ—Ç–æ—Ä–∞
    direction: "forward" –∏–ª–∏ "backward"
    speed: —Å–∫–æ—Ä–æ—Å—Ç—å 0-100%
    duration: –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    motor = MotorController()
    try:
        print(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç: {direction}, {speed}%, {duration}—Å")
        
        if direction == "forward":
            motor.forward(speed)
        else:
            motor.backward(speed)
        
        time.sleep(duration)
        
    finally:
        motor.cleanup()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# quick_spin("forward", 80, 10)  # –í–ø–µ—Ä–µ–¥, 80%, 10 —Å–µ–∫—É–Ω–¥