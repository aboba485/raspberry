import RPi.GPIO as GPIO
import time
import threading

class ServoMotor:
    def __init__(self, gpio_pin=12):
        """
        –°–µ—Ä–≤–æ –º–æ—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –Ω–∞–ø—Ä—è–º—É—é –∫ Raspberry Pi 5
        
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
        ‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π (VCC) ‚Üí 5V Raspberry Pi
        ‚Ä¢ –ß–µ—Ä–Ω—ã–π/–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π (GND) ‚Üí Ground Raspberry Pi  
        ‚Ä¢ –ñ–µ–ª—Ç—ã–π/–û—Ä–∞–Ω–∂–µ–≤—ã–π (Signal) ‚Üí GPIO 12
        """
        self.gpio_pin = gpio_pin
        self.current_angle = 90
        self.is_sweeping = False
        self.sweep_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.gpio_pin, GPIO.OUT)
        
        # PWM —Å —á–∞—Å—Ç–æ—Ç–æ–π 50Hz (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Å–µ—Ä–≤–æ)
        self.pwm = GPIO.PWM(self.gpio_pin, 50)
        self.pwm.start(0)
        
        print(f"ü§ñ –°–µ—Ä–≤–æ –º–æ—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GPIO {self.gpio_pin}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        self.write(90)
        time.sleep(1)
    
    def angle_to_duty_cycle(self, angle):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–≥–ª–∞ –≤ duty cycle –¥–ª—è PWM
        0¬∞ = 2.5%, 90¬∞ = 7.5%, 180¬∞ = 12.5%
        """
        angle = max(0, min(180, angle))
        duty_cycle = 2.5 + (angle / 180.0) * 10.0
        return duty_cycle
    
    def write(self, angle):
        """
        –ü–æ–≤–æ—Ä–æ—Ç —Å–µ—Ä–≤–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É–≥–æ–ª (0-180¬∞)
        """
        angle = max(0, min(180, angle))
        duty_cycle = self.angle_to_duty_cycle(angle)
        
        self.pwm.ChangeDutyCycle(duty_cycle)
        self.current_angle = angle
        
        print(f"üéØ –°–µ—Ä–≤–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ –Ω–∞ {angle}¬∞")
        time.sleep(0.5)  # –í—Ä–µ–º—è –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
    
    def sweep(self, start_angle=0, end_angle=180, step=5, delay=0.1):
        """
        –ü–ª–∞–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ –º–µ–∂–¥—É —É–≥–ª–∞–º–∏
        """
        print(f"üîÑ –ö–∞—á–∞–Ω–∏–µ –æ—Ç {start_angle}¬∞ –¥–æ {end_angle}¬∞")
        
        # –î–≤–∏–∂–µ–Ω–∏–µ –∫ end_angle
        if start_angle < end_angle:
            for angle in range(start_angle, end_angle + 1, step):
                self.write(angle)
                time.sleep(delay)
        else:
            for angle in range(start_angle, end_angle - 1, -step):
                self.write(angle)
                time.sleep(delay)
    
    def continuous_sweep(self, start_angle=0, end_angle=180, speed=1):
        """
        –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        """
        if self.is_sweeping:
            print("‚ö†Ô∏è  –°–µ—Ä–≤–æ —É–∂–µ –∫–∞—á–∞–µ—Ç—Å—è!")
            return
        
        self.is_sweeping = True
        
        def sweep_motion():
            print(f"üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ: {start_angle}¬∞ ‚Üî {end_angle}¬∞")
            
            while self.is_sweeping:
                # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥
                for angle in range(start_angle, end_angle + 1, 2):
                    if not self.is_sweeping:
                        break
                    self.write(angle)
                    time.sleep(0.05 / speed)
                
                # –î–≤–∏–∂–µ–Ω–∏–µ –Ω–∞–∑–∞–¥
                for angle in range(end_angle, start_angle - 1, -2):
                    if not self.is_sweeping:
                        break
                    self.write(angle)
                    time.sleep(0.05 / speed)
        
        self.sweep_thread = threading.Thread(target=sweep_motion)
        self.sweep_thread.daemon = True
        self.sweep_thread.start()
    
    def rotate_continuous(self, direction="clockwise", speed=2):
        """
        –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
        """
        if self.is_sweeping:
            print("‚ö†Ô∏è  –°–µ—Ä–≤–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return
        
        self.is_sweeping = True
        
        def continuous_rotation():
            print(f"üîÑ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ ({direction})")
            angle = self.current_angle
            
            while self.is_sweeping:
                if direction == "clockwise":
                    angle += 10
                    if angle > 180:
                        angle = 0
                else:
                    angle -= 10
                    if angle < 0:
                        angle = 180
                
                self.write(angle)
                time.sleep(0.1 / speed)
        
        self.sweep_thread = threading.Thread(target=continuous_rotation)
        self.sweep_thread.daemon = True
        self.sweep_thread.start()
    
    def stop(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
        """
        if self.is_sweeping:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–æ")
            self.is_sweeping = False
            if self.sweep_thread:
                self.sweep_thread.join()
    
    def center(self):
        """
        –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (90¬∞)
        """
        print("üéØ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä")
        self.write(90)
    
    def test_basic_positions(self):
        """
        –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        """
        print("üîß –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        positions = [0, 45, 90, 135, 180, 90]
        
        for pos in positions:
            print(f"üìç –ü–æ–∑–∏—Ü–∏—è: {pos}¬∞")
            self.write(pos)
            time.sleep(1)
        
        print("‚úÖ –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def cleanup(self):
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        self.stop()
        self.pwm.stop()
        GPIO.cleanup()
        print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã")

# –ü–µ—Ä–µ–≤–æ–¥ Arduino –∫–æ–¥–∞
class ArduinoStyleServo:
    def __init__(self, pin=12):
        self.servo = ServoMotor(pin)
    
    def attach(self, pin):
        """–ê–Ω–∞–ª–æ–≥ servo.attach()"""
        print(f"üìå Servo attached to GPIO {pin}")
    
    def write(self, angle):
        """–ê–Ω–∞–ª–æ–≥ servo.write()"""
        self.servo.write(angle)
    
    def cleanup(self):
        self.servo.cleanup()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–æ (–∫–∞–∫ –≤ Arduino)
servomecatronicos = ArduinoStyleServo(pin=12)

def setup():
    """Arduino setup()"""
    print("üöÄ Setup...")
    servomecatronicos.attach(12)
    print("‚úÖ Setup –∑–∞–≤–µ—Ä—à–µ–Ω!")

def loop():
    """Arduino loop() - –æ–¥–∏–Ω —Ü–∏–∫–ª"""
    print("üîÑ Loop...")
    
    time.sleep(2)                    # delay(2000)
    servomecatronicos.write(90)      # servomecatronicos.write(90)
    
    time.sleep(2)                    # delay(2000)
    servomecatronicos.write(180)     # servomecatronicos.write(180)
    
    time.sleep(2)                    # delay(2000)
    servomecatronicos.write(0)       # servomecatronicos.write(0)
    
    print("‚úÖ Loop –∑–∞–≤–µ—Ä—à–µ–Ω!")

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def demo_basic():
    """–ë–∞–∑–æ–≤–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è"""
    servo = ServoMotor(gpio_pin=12)
    
    try:
        print("\n=== –ë–ê–ó–û–í–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ===")
        servo.test_basic_positions()
        
    finally:
        servo.cleanup()

def demo_sweeping():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—á–∞–Ω–∏—è"""
    servo = ServoMotor(gpio_pin=12)
    
    try:
        print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–ê–ß–ê–ù–ò–Ø ===")
        
        # –ü–ª–∞–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ
        print("1Ô∏è‚É£  –ü–ª–∞–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ")
        servo.sweep(30, 150, step=3, delay=0.05)
        
        time.sleep(1)
        
        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ
        print("2Ô∏è‚É£  –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ (5 —Å–µ–∫)")
        servo.continuous_sweep(45, 135, speed=2)
        time.sleep(5)
        servo.stop()
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä
        servo.center()
        
    finally:
        servo.cleanup()

def demo_continuous_rotation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è"""
    servo = ServoMotor(gpio_pin=12)
    
    try:
        print("\n=== –ù–ï–ü–†–ï–†–´–í–ù–û–ï –í–†–ê–©–ï–ù–ò–ï ===")
        
        print("üîÑ –í—Ä–∞—â–µ–Ω–∏–µ –ø–æ —á–∞—Å–æ–≤–æ–π (5 —Å–µ–∫)")
        servo.rotate_continuous("clockwise", speed=3)
        time.sleep(5)
        
        print("üîÑ –°–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        servo.stop()
        time.sleep(0.5)
        
        servo.rotate_continuous("counterclockwise", speed=3)
        time.sleep(5)
        servo.stop()
        
        servo.center()
        
    finally:
        servo.cleanup()

def arduino_demo():
    """–¢–æ—á–Ω–∞—è –∫–æ–ø–∏—è Arduino –∫–æ–¥–∞"""
    try:
        print("\n=== ARDUINO –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø ===")
        
        setup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤
        for i in range(3):
            print(f"\n--- –¶–∏–∫–ª {i+1} ---")
            loop()
        
    finally:
        servomecatronicos.cleanup()

# –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
if __name__ == "__main__":
    print("ü§ñ –°–ï–†–í–û –ú–û–¢–û–† RASPBERRY PI 5")
    print("=" * 50)
    print("üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: GPIO 12, 5V, GND")
    
    choice = input("""
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é:
1 - –ë–∞–∑–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
2 - –ö–∞—á–∞–Ω–∏–µ
3 - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ  
4 - Arduino —Å—Ç–∏–ª—å –∫–æ–¥
5 - –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): """)
    
    try:
        if choice == "1":
            demo_basic()
        elif choice == "2":
            demo_sweeping()
        elif choice == "3":
            demo_continuous_rotation()
        elif choice == "4":
            arduino_demo()
        elif choice == "5":
            print("üé¨ –í—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–¥—Ä—è–¥:")
            demo_basic()
            time.sleep(2)
            demo_sweeping()
            time.sleep(2)
            demo_continuous_rotation()
            time.sleep(2)
            arduino_demo()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é –±–∞–∑–æ–≤—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é")
            demo_basic()
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        try:
            GPIO.cleanup()
        except:
            pass

# –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–æ"""
    servo = ServoMotor(12)
    try:
        servo.write(0)
        time.sleep(1)
        servo.write(90)
        time.sleep(1)
        servo.write(180)
        time.sleep(1)
        servo.write(90)
    finally:
        servo.cleanup()

def quick_arduino():
    """–ë—ã—Å—Ç—Ä—ã–π Arduino —Ç–µ—Å—Ç"""
    try:
        setup()
        loop()
    finally:
        servomecatronicos.cleanup()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
# quick_test()      # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
# quick_arduino()   # Arduino —Å—Ç–∏–ª—å