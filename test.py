#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ PCA9685
–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
"""

import smbus
import time
import sys

class MotorController:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –º–æ—Ç–æ—Ä–∞"""
        self.bus = smbus.SMBus(1)
        self.PCA9685_ADDRESS = 0x40
        self.CHANNEL = 0
        self.PWM_FREQ = 50  # 50Hz –¥–ª—è —Å–µ—Ä–≤–æ
        
        # –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è MG996R —Å–µ—Ä–≤–æ (–≤ —Ç–∏–∫–∞—Ö –æ—Ç 0-4095)
        # MG996R —Ç—Ä–µ–±—É–µ—Ç: 1ms-2ms –∏–º–ø—É–ª—å—Å—ã –ø—Ä–∏ 50Hz
        # –ü—Ä–∏ 50Hz: –ø–µ—Ä–∏–æ–¥ = 20ms, 4096 —Ç–∏–∫–æ–≤ = 20ms
        # 1ms = 205 —Ç–∏–∫–æ–≤, 2ms = 410 —Ç–∏–∫–æ–≤
        self.SERVO_MIN = 205   # 1ms –∏–º–ø—É–ª—å—Å (0¬∞)
        self.SERVO_MAX = 410   # 2ms –∏–º–ø—É–ª—å—Å (180¬∞)  
        self.SERVO_CENTER = 307 # 1.5ms –∏–º–ø—É–ª—å—Å (90¬∞)
        
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ—Ç–æ—Ä–æ–º...")
        
    def scan_i2c_devices(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        print("\nüì° –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        devices = []
        for addr in range(0x03, 0x78):
            try:
                self.bus.read_byte(addr)
                devices.append(hex(addr))
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {hex(addr)}")
            except:
                pass
        
        if hex(self.PCA9685_ADDRESS) in devices:
            print(f"   ‚úÖ PCA9685 –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {hex(self.PCA9685_ADDRESS)}")
            return True
        else:
            print(f"   ‚ùå PCA9685 –ù–ï –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É {hex(self.PCA9685_ADDRESS)}")
            return False
    
    def init_pca9685(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PCA9685 –¥—Ä–∞–π–≤–µ—Ä–∞"""
        print("\n‚öôÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PCA9685...")
        try:
            # –í–∫–ª—é—á–µ–Ω–∏–µ PCA9685
            self.bus.write_byte_data(self.PCA9685_ADDRESS, 0x00, 0x00)
            time.sleep(0.1)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã PWM (~50Hz –¥–ª—è —Å–µ—Ä–≤–æ)
            # –§–æ—Ä–º—É–ª–∞: —á–∞—Å—Ç–æ—Ç–∞ = 25MHz / (4096 * (prescale + 1))
            # –î–ª—è 50Hz: prescale = 121
            prescale = 121
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Å–Ω–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
            self.bus.write_byte_data(self.PCA9685_ADDRESS, 0x00, 0x10)
            time.sleep(0.1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º prescale
            self.bus.write_byte_data(self.PCA9685_ADDRESS, 0xFE, prescale)
            time.sleep(0.1)
            
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Å–Ω–∞
            self.bus.write_byte_data(self.PCA9685_ADDRESS, 0x00, 0x00)
            time.sleep(0.1)
            
            # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
            self.bus.write_byte_data(self.PCA9685_ADDRESS, 0x00, 0xA0)
            time.sleep(0.1)
            
            print("   ‚úÖ PCA9685 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PCA9685: {e}")
            return False
    
    def set_pwm(self, channel, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWM –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞
            base_reg = 0x06 + 4 * channel
            
            # ON –≤—Ä–µ–º—è = 0 (–Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞)
            self.bus.write_byte_data(self.PCA9685_ADDRESS, base_reg, 0)      # ON_L
            self.bus.write_byte_data(self.PCA9685_ADDRESS, base_reg + 1, 0)  # ON_H
            
            # OFF –≤—Ä–µ–º—è = value (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø—É–ª—å—Å–∞)
            self.bus.write_byte_data(self.PCA9685_ADDRESS, base_reg + 2, value & 0xFF)      # OFF_L
            self.bus.write_byte_data(self.PCA9685_ADDRESS, base_reg + 3, (value >> 8) & 0xFF)  # OFF_H
            
            return True
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWM: {e}")
            return False
    
    def test_basic_pwm(self):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PWM —Å–∏–≥–Ω–∞–ª–æ–≤"""
        print("\nüîç –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PWM...")
        
        test_values = [0, 150, 300, 450, 600, 0]
        
        for value in test_values:
            print(f"   üìä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PWM = {value}")
            if self.set_pwm(self.CHANNEL, value):
                print(f"   ‚úÖ PWM {value} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PWM {value}")
            
            time.sleep(2)
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = input(f"   ‚ùì –ï—Å—Ç—å –ª–∏ —Ä–µ–∞–∫—Ü–∏—è –º–æ—Ç–æ—Ä–∞ –Ω–∞ PWM {value}? (y/n/stop): ").lower()
            if response == 'y':
                print(f"   ‚úÖ –ú–æ—Ç–æ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ PWM {value}")
            elif response == 'stop':
                print("   ‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            else:
                print(f"   ‚ùå –ù–µ—Ç —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ PWM {value}")
    
    def test_servo_range(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–∞"""
        print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–∞...")
        
        # –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –º–∏–Ω–∏–º—É–º–∞ –∫ –º–∞–∫—Å–∏–º—É–º—É
        print("   üìà –ü–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –æ—Ç –º–∏–Ω–∏–º—É–º–∞ –∫ –º–∞–∫—Å–∏–º—É–º—É...")
        for value in range(self.SERVO_MIN, self.SERVO_MAX + 1, 10):
            print(f"   üìä PWM = {value}")
            self.set_pwm(self.CHANNEL, value)
            time.sleep(0.1)
        
        time.sleep(1)
        
        # –û–±—Ä–∞—Ç–Ω–æ –∫ —Ü–µ–Ω—Ç—Ä—É
        print("   üìç –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é...")
        self.set_pwm(self.CHANNEL, self.SERVO_CENTER)
        time.sleep(1)
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        response = input("   ‚ùì –ë—ã–ª–æ –ª–∏ –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞? (y/n): ").lower()
        return response == 'y'
    
    def test_dc_motor_mode(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ DC –º–æ—Ç–æ—Ä–∞"""
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ DC –º–æ—Ç–æ—Ä–∞...")
        print("   ‚ÑπÔ∏è  –ï—Å–ª–∏ —ç—Ç–æ DC –º–æ—Ç–æ—Ä, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏...")
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è DC –º–æ—Ç–æ—Ä–∞
        speeds = [0, 1000, 2000, 3000, 4095, 0]
        
        for speed in speeds:
            print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å = {speed} ({speed/4095*100:.1f}%)")
            self.set_pwm(self.CHANNEL, speed)
            time.sleep(2)
            
            response = input(f"   ‚ùì –ï—Å—Ç—å –ª–∏ –≤—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {speed}? (y/n/stop): ").lower()
            if response == 'y':
                print(f"   ‚úÖ –ú–æ—Ç–æ—Ä –≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ {speed}")
                return True
            elif response == 'stop':
                break
        
        return False
    
    def test_all_channels(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        print("\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥—Ä–∞–π–≤–µ—Ä–∞...")
        
        test_value = 300
        
        for channel in range(16):
            print(f"   üì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª {channel}...")
            self.set_pwm(channel, test_value)
            time.sleep(1)
            
            response = input(f"   ‚ùì –ï—Å—Ç—å –ª–∏ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–∞–Ω–∞–ª–µ {channel}? (y/n/skip): ").lower()
            if response == 'y':
                print(f"   ‚úÖ –ö–∞–Ω–∞–ª {channel} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                self.CHANNEL = channel
                return True
            elif response == 'skip':
                continue
            
            # –í—ã–∫–ª—é—á–∞–µ–º –∫–∞–Ω–∞–ª
            self.set_pwm(channel, 0)
        
        return False
    
    def interactive_control(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º"""
        print("\nüéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–º")
        print("   –ö–æ–º–∞–Ω–¥—ã:")
        print("   - –ß–∏—Å–ª–æ (0-4095): —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PWM –∑–Ω–∞—á–µ–Ω–∏–µ")
        print("   - 'min': –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ—Ä–≤–æ")
        print("   - 'max': –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ—Ä–≤–æ") 
        print("   - 'center': —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è —Å–µ—Ä–≤–æ")
        print("   - 'sweep': –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ")
        print("   - 'stop': –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ—Ç–æ—Ä")
        print("   - 'quit': –≤—ã—Ö–æ–¥")
        
        while True:
            try:
                command = input(f"\n   –ö–∞–Ω–∞–ª {self.CHANNEL} > ").strip().lower()
                
                if command == 'quit':
                    break
                elif command == 'stop':
                    self.set_pwm(self.CHANNEL, 0)
                    print("   ‚èπÔ∏è  –ú–æ—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                elif command == 'min':
                    self.set_pwm(self.CHANNEL, self.SERVO_MIN)
                    print(f"   üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.SERVO_MIN}")
                elif command == 'max':
                    self.set_pwm(self.CHANNEL, self.SERVO_MAX)
                    print(f"   üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {self.SERVO_MAX}")
                elif command == 'center':
                    self.set_pwm(self.CHANNEL, self.SERVO_CENTER)
                    print(f"   üìç –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: {self.SERVO_CENTER}")
                elif command == 'sweep':
                    print("   üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ...")
                    for i in range(5):
                        # –ö –º–∞–∫—Å–∏–º—É–º—É
                        for val in range(self.SERVO_MIN, self.SERVO_MAX, 5):
                            self.set_pwm(self.CHANNEL, val)
                            time.sleep(0.02)
                        # –ö –º–∏–Ω–∏–º—É–º—É
                        for val in range(self.SERVO_MAX, self.SERVO_MIN, -5):
                            self.set_pwm(self.CHANNEL, val)
                            time.sleep(0.02)
                    self.set_pwm(self.CHANNEL, self.SERVO_CENTER)
                elif command.isdigit():
                    value = int(command)
                    if 0 <= value <= 4095:
                        self.set_pwm(self.CHANNEL, value)
                        print(f"   üìä PWM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {value}")
                    else:
                        print("   ‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 4095")
                else:
                    print("   ‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                    
            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def run_diagnostics(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        print("üöÄ –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ú–û–¢–û–†–û–ú")
        print("=" * 60)
        
        # –®–∞–≥ 1: –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ I2C
        if not self.scan_i2c_devices():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: PCA9685 –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ I2C –ø—Ä–æ–≤–æ–¥–æ–≤")
            return False
        
        # –®–∞–≥ 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PCA9685
        if not self.init_pca9685():
            print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å PCA9685!")
            return False
        
        # –®–∞–≥ 3: –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PWM
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª {self.CHANNEL}...")
        self.test_basic_pwm()
        
        # –®–∞–≥ 4: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–æ—Ç–æ—Ä–∞
        print(f"\nü§î –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ—Ç–æ—Ä–∞...")
        
        motor_works = False
        
        # –¢–µ—Å—Ç –∫–∞–∫ —Å–µ—Ä–≤–æ
        if self.test_servo_range():
            print("   ‚úÖ –ú–æ—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –°–ï–†–í–û!")
            motor_works = True
        else:
            # –¢–µ—Å—Ç –∫–∞–∫ DC –º–æ—Ç–æ—Ä
            if self.test_dc_motor_mode():
                print("   ‚úÖ –ú–æ—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ DC –ú–û–¢–û–†!")
                motor_works = True
        
        # –®–∞–≥ 5: –ï—Å–ª–∏ –º–æ—Ç–æ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if not motor_works:
            print("\n‚ùì –ú–æ—Ç–æ—Ä –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   1. üîã –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ")
            print("   2. üîå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞")
            print("   3. ‚ö° –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –º–æ—Ç–æ—Ä–∞")
            print("   4. üì° –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ –¥—Ä–∞–π–≤–µ—Ä–∞")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç –¥—Ä—É–≥–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
            test_other = input("\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã? (y/n): ").lower()
            if test_other == 'y':
                if self.test_all_channels():
                    motor_works = True
        
        # –®–∞–≥ 6: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if motor_works:
            print(f"\nüéâ –£–°–ü–ï–•! –ú–æ—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –∫–∞–Ω–∞–ª–µ {self.CHANNEL}")
            interactive = input("‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ? (y/n): ").lower()
            if interactive == 'y':
                self.interactive_control()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        self.set_pwm(self.CHANNEL, 0)
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ú–æ—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        
        return motor_works

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        controller = MotorController()
        controller.run_diagnostics()
        
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ I2C")
    finally:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    main()