import RPi.GPIO as GPIO
import time
import sys

# –í–∞—Ä–∏–∞–Ω—Ç 1: I2C —Å–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä (PCA9685)
try:
    import smbus
    I2C_AVAILABLE = True
except ImportError:
    I2C_AVAILABLE = False
    print("‚ö†Ô∏è  smbus –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: sudo apt install python3-smbus")

class I2CServoDriver:
    def __init__(self, i2c_address=0x40, channel=0):
        """
        –°–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä —á–µ—Ä–µ–∑ I2C (–Ω–∞–ø—Ä–∏–º–µ—Ä PCA9685)
        
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
        Raspberry Pi 5 ‚Üí –°–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä:
        ‚Ä¢ 5V ‚Üí VCC
        ‚Ä¢ GND ‚Üí GND  
        ‚Ä¢ GPIO 2 (SDA) ‚Üí SDA
        ‚Ä¢ GPIO 3 (SCL) ‚Üí SCL
        ‚Ä¢ –ü–∞—É—Ä–±–∞–Ω–∫ ‚Üí V+ (–ø–∏—Ç–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤)
        
        –ú–æ—Ç–æ—Ä ‚Üí –ö–∞–Ω–∞–ª 0 –¥—Ä–∞–π–≤–µ—Ä–∞
        """
        if not I2C_AVAILABLE:
            raise Exception("I2C –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
        self.i2c_address = i2c_address
        self.channel = channel
        self.bus = smbus.SMBus(1)
        
        print(f"ü§ñ I2C —Å–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä: –∞–¥—Ä–µ—Å 0x{i2c_address:02x}, –∫–∞–Ω–∞–ª {channel}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PCA9685
        self.init_driver()
    
    def init_driver(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            # –°–±—Ä–æ—Å
            self.bus.write_byte_data(self.i2c_address, 0x00, 0x00)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–æ—Ç—ã PWM ~50Hz
            prescale = int(25000000.0 / (4096 * 50.0) - 1)
            
            old_mode = self.bus.read_byte_data(self.i2c_address, 0x00)
            sleep_mode = (old_mode & 0x7F) | 0x10
            self.bus.write_byte_data(self.i2c_address, 0x00, sleep_mode)
            self.bus.write_byte_data(self.i2c_address, 0xFE, prescale)
            self.bus.write_byte_data(self.i2c_address, 0x00, old_mode)
            time.sleep(0.005)
            self.bus.write_byte_data(self.i2c_address, 0x00, old_mode | 0xA1)
            
            print("‚úÖ I2C –¥—Ä–∞–π–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ I2C: {e}")
    
    def set_pwm(self, on_time, off_time):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PWM –¥–ª—è –∫–∞–Ω–∞–ª–∞ 0"""
        try:
            base_reg = 0x06 + 4 * self.channel
            self.bus.write_byte_data(self.i2c_address, base_reg, on_time & 0xFF)
            self.bus.write_byte_data(self.i2c_address, base_reg + 1, on_time >> 8)
            self.bus.write_byte_data(self.i2c_address, base_reg + 2, off_time & 0xFF)
            self.bus.write_byte_data(self.i2c_address, base_reg + 3, off_time >> 8)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ PWM: {e}")
    
    def rotate_motor(self, speed):
        """
        –í—Ä–∞—â–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞
        speed: -100 –¥–æ +100 (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = –Ω–∞–∑–∞–¥, –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = –≤–ø–µ—Ä–µ–¥, 0 = —Å—Ç–æ–ø)
        """
        speed = max(-100, min(100, speed))
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ PWM
        center_pulse = 307  # 1.5ms (—Å—Ç–æ–ø)
        max_range = 102     # –î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        
        pulse_width = center_pulse + (speed / 100.0) * max_range
        self.set_pwm(0, int(pulse_width))
        
        if speed == 0:
            print("üõë –ú–æ—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        elif speed > 0:
            print(f"‚û°Ô∏è  –ú–æ—Ç–æ—Ä –≤–ø–µ—Ä–µ–¥: {speed}%")
        else:
            print(f"‚¨ÖÔ∏è  –ú–æ—Ç–æ—Ä –Ω–∞–∑–∞–¥: {abs(speed)}%")
    
    def stop_motor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–∞"""
        self.set_pwm(0, 0)
        print("üõë –ú–æ—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class GPIOServoDriver:
    def __init__(self, pin1=4, pin2=12, channel=0):
        """
        –°–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä —á–µ—Ä–µ–∑ GPIO
        
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
        Raspberry Pi 5 ‚Üí –°–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä:
        ‚Ä¢ 5V ‚Üí VCC
        ‚Ä¢ GND ‚Üí GND
        ‚Ä¢ GPIO 4 ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 1
        ‚Ä¢ GPIO 12 ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ 2
        ‚Ä¢ –ü–∞—É—Ä–±–∞–Ω–∫ ‚Üí –ü–∏—Ç–∞–Ω–∏–µ –º–æ—Ç–æ—Ä–æ–≤
        
        –ú–æ—Ç–æ—Ä ‚Üí –ö–∞–Ω–∞–ª 0 –¥—Ä–∞–π–≤–µ—Ä–∞
        """
        self.pin1 = pin1
        self.pin2 = pin2
        self.channel = channel
        
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.pin1, GPIO.OUT)
        GPIO.setup(self.pin2, GPIO.OUT)
        
        # PWM –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ –ø–∏–Ω–æ–≤ –¥–ª—è —Å–µ—Ä–≤–æ
        self.pwm = GPIO.PWM(self.pin1, 50)  # 50Hz
        self.pwm.start(0)
        
        print(f"ü§ñ GPIO —Å–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä: –ø–∏–Ω—ã {pin1}, {pin2}, –∫–∞–Ω–∞–ª {channel}")
    
    def rotate_motor_angle(self, angle):
        """
        –ü–æ–≤–æ—Ä–æ—Ç —Å–µ—Ä–≤–æ –Ω–∞ —É–≥–æ–ª (0-180¬∞)
        """
        angle = max(0, min(180, angle))
        duty_cycle = 2.5 + (angle / 180.0) * 10.0
        
        self.pwm.ChangeDutyCycle(duty_cycle)
        print(f"üéØ –ú–æ—Ç–æ—Ä –Ω–∞ –∫–∞–Ω–∞–ª–µ {self.channel}: {angle}¬∞")
        time.sleep(0.5)
    
    def rotate_motor_direction(self, direction="forward", duration=2):
        """
        –í—Ä–∞—â–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        """
        if direction == "forward":
            print(f"‚û°Ô∏è  –ú–æ—Ç–æ—Ä –∫–∞–Ω–∞–ª {self.channel} –≤–ø–µ—Ä–µ–¥ ({duration}—Å)")
            GPIO.output(self.pin1, GPIO.HIGH)
            GPIO.output(self.pin2, GPIO.LOW)
        else:
            print(f"‚¨ÖÔ∏è  –ú–æ—Ç–æ—Ä –∫–∞–Ω–∞–ª {self.channel} –Ω–∞–∑–∞–¥ ({duration}—Å)")
            GPIO.output(self.pin1, GPIO.LOW)
            GPIO.output(self.pin2, GPIO.HIGH)
        
        time.sleep(duration)
        self.stop_motor()
    
    def stop_motor(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Ç–æ—Ä–∞"""
        GPIO.output(self.pin1, GPIO.LOW)
        GPIO.output(self.pin2, GPIO.LOW)
        self.pwm.ChangeDutyCycle(0)
        print(f"üõë –ú–æ—Ç–æ—Ä –∫–∞–Ω–∞–ª {self.channel} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ GPIO"""
        self.pwm.stop()
        GPIO.cleanup()
        print("‚úÖ GPIO –æ—á–∏—â–µ–Ω—ã")

def test_i2c_driver():
    """–¢–µ—Å—Ç I2C –¥—Ä–∞–π–≤–µ—Ä–∞"""
    if not I2C_AVAILABLE:
        print("‚ùå I2C –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    try:
        print("\nüîß –¢–µ—Å—Ç I2C —Å–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä–∞...")
        driver = I2CServoDriver(channel=0)
        
        # –¢–µ—Å—Ç –≤—Ä–∞—â–µ–Ω–∏—è
        speeds = [50, 0, -50, 0]
        for speed in speeds:
            driver.rotate_motor(speed)
            time.sleep(3)
        
        driver.stop_motor()
        print("‚úÖ I2C —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå I2C —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")

def test_gpio_driver():
    """–¢–µ—Å—Ç GPIO –¥—Ä–∞–π–≤–µ—Ä–∞"""
    try:
        print("\nüîß –¢–µ—Å—Ç GPIO —Å–µ—Ä–≤–æ–¥—Ä–∞–π–≤–µ—Ä–∞...")
        driver = GPIOServoDriver(pin1=4, pin2=12, channel=0)
        
        # –¢–µ—Å—Ç —É–≥–ª–æ–≤ —Å–µ—Ä–≤–æ
        print("1Ô∏è‚É£  –¢–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–π —Å–µ—Ä–≤–æ:")
        angles = [0, 90, 180, 90]
        for angle in angles:
            driver.rotate_motor_angle(angle)
            time.sleep(2)
        
        # –¢–µ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        print("2Ô∏è‚É£  –¢–µ—Å—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
        driver.rotate_motor_direction("forward", 3)
        time.sleep(1)
        driver.rotate_motor_direction("backward", 3)
        
        driver.cleanup()
        print("‚úÖ GPIO —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå GPIO —Ç–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è: {e}")
        try:
            GPIO.cleanup()
        except:
            pass

def scan_i2c():
    """–ü–æ–∏—Å–∫ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    if not I2C_AVAILABLE:
        print("‚ùå I2C –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    print("\nüîç –ü–æ–∏—Å–∫ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    bus = smbus.SMBus(1)
    devices = []
    
    for addr in range(0x08, 0x78):
        try:
            bus.read_byte(addr)
            devices.append(addr)
            print(f"   –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: 0x{addr:02x}")
        except:
            pass
    
    if not devices:
        print("‚ùå I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–∏—Ç–µ I2C")
    else:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")

def simple_servo_control():
    """–ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ —á–µ—Ä–µ–∑ PCA9685"""
    print("\nüéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–û –ß–ï–†–ï–ó PCA9685")
    print("="*40)
    
    if not I2C_AVAILABLE:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ smbus: sudo apt install python3-smbus")
        return
    
    try:
        driver = I2CServoDriver(channel=0)
        
        print("–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–µ—Ä–≤–æ:")
        print("0 - –£–≥–æ–ª 0¬∞")
        print("90 - –£–≥–æ–ª 90¬∞") 
        print("180 - –£–≥–æ–ª 180¬∞")
        print("+ - –í—Ä–∞—â–µ–Ω–∏–µ –≤–ø–µ—Ä–µ–¥")
        print("- - –í—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–∞–¥")
        print("s - –°—Ç–æ–ø")
        print("x - –í—ã—Ö–æ–¥")
        
        while True:
            cmd = input("\n–ö–æ–º–∞–Ω–¥–∞: ").strip()
            
            if cmd == "0":
                driver.set_servo_angle(0)
            elif cmd == "90":
                driver.set_servo_angle(90)
            elif cmd == "180":
                driver.set_servo_angle(180)
            elif cmd == "+":
                driver.rotate_motor(50)
            elif cmd == "-":
                driver.rotate_motor(-50)
            elif cmd == "s":
                driver.rotate_motor(0)
            elif cmd == "x":
                break
            else:
                print("‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 0, 90, 180, +, -, s, x")
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def advanced_motor_debug():
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ—Ç–æ—Ä–∞"""
    print("\nüîç –ü–†–û–î–í–ò–ù–£–¢–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–¢–û–†–ê")
    print("="*50)
    
    if not I2C_AVAILABLE:
        return
    
    try:
        driver = I2CServoDriver(channel=0)
        
        print("üìã –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–í–ï–†–ö–ò:")
        print("1. ‚ö° –ü–∞—É—Ä–±–∞–Ω–∫ –í–ö–õ–Æ–ß–ï–ù –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—Ä—è–¥?")
        print("2. üîå USB –∫–∞–±–µ–ª—å –†–ê–ó–†–ï–ó–ê–ù –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ V+ –∏ GND?")
        print("3. üéØ –ú–æ—Ç–æ—Ä –∏–º–µ–µ—Ç –í–°–ï 3 –ø—Ä–æ–≤–æ–¥–∞ –Ω–∞ –∫–∞–Ω–∞–ª–µ 0?")
        print("4. üîó –í–°–ï GND —Å–æ–µ–¥–∏–Ω–µ–Ω—ã –≤–º–µ—Å—Ç–µ (Pi + PCA9685 + –ø–∞—É—Ä–±–∞–Ω–∫)?")
        
        input("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∏–ª –≤—Å–µ –ø—É–Ω–∫—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ Enter...")
        
        print("\nüß™ –¢–ï–°–¢ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô PWM:")
        
        # –û—á–µ–Ω—å —à–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        extreme_values = [
            (100, "–û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π PWM"),
            (200, "–ù–∏–∑–∫–∏–π PWM"), 
            (300, "–°—Ä–µ–¥–Ω–∏–π-–Ω–∏–∑–∫–∏–π PWM"),
            (400, "–°—Ä–µ–¥–Ω–∏–π PWM"),
            (500, "–°—Ä–µ–¥–Ω–∏–π-–≤—ã—Å–æ–∫–∏–π PWM"),
            (600, "–í—ã—Å–æ–∫–∏–π PWM"),
            (700, "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π PWM"),
            (0, "–í–´–ö–õ")
        ]
        
        working_values = []
        
        for value, desc in extreme_values:
            print(f"\nüéØ {desc} (PWM: {value})")
            driver.set_pwm(0, value)
            
            # –ñ–¥–µ–º –¥–æ–ª—å—à–µ
            print("   –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã...")
            time.sleep(3)
            
            response = input("   –õ–Æ–ë–û–ï –¥–≤–∏–∂–µ–Ω–∏–µ –º–æ—Ç–æ—Ä–∞? (y/n): ").lower()
            if response == 'y':
                working_values.append(value)
                print(f"   ‚úÖ –†–ê–ë–û–¢–ê–ï–¢ –Ω–∞ PWM {value}!")
            
        if working_values:
            print(f"\nüéâ –ù–ê–ô–î–ï–ù–´ –†–ê–ë–û–ß–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø: {working_values}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            print("\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç —Ä–∞–±–æ—á–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π:")
            for val in working_values:
                print(f"PWM {val}...")
                driver.set_pwm(0, val)
                time.sleep(2)
                driver.set_pwm(0, 0)
                time.sleep(1)
        else:
            print("\n‚ùå –ù–ò –û–î–ù–û –ó–ù–ê–ß–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
            print("\nüîß –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            print("1. üîã –ù–ï–¢ –ü–ò–¢–ê–ù–ò–Ø –æ—Ç –ø–∞—É—Ä–±–∞–Ω–∫–∞")
            print("2. üéØ –ú–æ—Ç–æ—Ä —Å–ª–æ–º–∞–Ω")
            print("3. üîå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–æ–≤")
            print("4. ‚ö° –ü–∞—É—Ä–±–∞–Ω–∫ –Ω–µ –≤—ã–¥–∞–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–∞")
            
            print("\nüí° –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´:")
            test_power_with_led()
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        driver.set_pwm(0, 0)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")

def test_power_with_led():
    """–¢–µ—Å—Ç –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LED"""
    print("\nüí° –¢–ï–°–¢ –ü–ò–¢–ê–ù–ò–Ø –° LED")
    print("="*30)
    
    print("üîß –ü–û–î–ö–õ–Æ–ß–ò–¢–ï LED –¥–ª—è —Ç–µ—Å—Ç–∞:")
    print("   LED –¥–ª–∏–Ω–Ω–∞—è –Ω–æ–∂–∫–∞ ‚Üí PCA9685 –∫–∞–Ω–∞–ª 0 (+)")
    print("   LED –∫–æ—Ä–æ—Ç–∫–∞—è –Ω–æ–∂–∫–∞ ‚Üí PCA9685 –∫–∞–Ω–∞–ª 0 (-)")
    print("   –ò–õ–ò –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º—É–ª—å—Ç–∏–º–µ—Ç—Ä –Ω–∞ –∫–∞–Ω–∞–ª–µ 0")
    
    led_test = input("\nLED –ø–æ–¥–∫–ª—é—á–µ–Ω? (y/n): ").lower()
    
    if led_test == 'y':
        try:
            driver = I2CServoDriver(channel=0)
            
            print("\nüîÜ –¢–µ—Å—Ç —è—Ä–∫–æ—Å—Ç–∏ LED:")
            for brightness in [200, 400, 600, 800, 1000]:
                print(f"   –Ø—Ä–∫–æ—Å—Ç—å {brightness}")
                driver.set_pwm(0, brightness)
                time.sleep(1)
                
                bright = input(f"   LED –≥–æ—Ä–∏—Ç –Ω–∞ {brightness}? (y/n): ").lower()
                if bright == 'y':
                    print(f"   ‚úÖ –ü–∏—Ç–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! PWM {brightness} –∞–∫—Ç–∏–≤–µ–Ω")
                else:
                    print(f"   ‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ PWM {brightness}")
            
            driver.set_pwm(0, 0)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LED —Ç–µ—Å—Ç–∞: {e}")

def check_motor_type():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –º–æ—Ç–æ—Ä–∞"""
    print("\nü§ñ –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –ú–û–¢–û–†–ê")
    print("="*35)
    
    print("‚ùì –ö–∞–∫–æ–π —É –≤–∞—Å –º–æ—Ç–æ—Ä?")
    print("1. üéØ –û–±—ã—á–Ω–æ–µ —Å–µ—Ä–≤–æ (–ø–æ–≤–æ—Ä–æ—Ç 0-180¬∞)")
    print("2. üîÑ Continuous rotation servo (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ)")
    print("3. ‚ö° DC –º–æ—Ç–æ—Ä (—Å —â–µ—Ç–∫–∞–º–∏)")
    print("4. ü§∑ –ù–µ –∑–Ω–∞—é")
    
    motor_type = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ")
    
    if motor_type == "1":
        print("\n‚úÖ –û–±—ã—á–Ω–æ–µ —Å–µ—Ä–≤–æ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PWM 150-600")
        print("üí° –ö–æ–º–∞–Ω–¥—ã: 0¬∞, 90¬∞, 180¬∞")
        
    elif motor_type == "2":
        print("\n‚úÖ Continuous servo - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PWM 250-350")
        print("üí° ~300 = —Å—Ç–æ–ø, <300 = –æ–¥–Ω–∞ —Å—Ç–æ—Ä–æ–Ω–∞, >300 = –¥—Ä—É–≥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞")
        
    elif motor_type == "3":
        print("\n‚ùå DC –º–æ—Ç–æ—Ä –ù–ï –†–ê–ë–û–¢–ê–ï–¢ —Å PCA9685!")
        print("üí° –ù—É–∂–µ–Ω L298N –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä DC –º–æ—Ç–æ—Ä–æ–≤")
        
    else:
        print("\nüîç –ü–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
        advanced_motor_debug()

def voltage_test():
    """–¢–µ—Å—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è"""
    print("\n‚ö° –¢–ï–°–¢ –ù–ê–ü–†–Ø–ñ–ï–ù–ò–Ø")
    print("="*25)
    
    print("üîã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º—É–ª—å—Ç–∏–º–µ—Ç—Ä–æ–º:")
    print("   1. –ü–∞—É—Ä–±–∞–Ω–∫ USB –≤—ã—Ö–æ–¥: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~5V")
    print("   2. PCA9685 V+: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~5V")
    print("   3. PCA9685 VCC: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~5V")  
    print("   4. PCA9685 –∫–∞–Ω–∞–ª 0 –ø—Ä–∏ PWM 400: –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3-5V")
    
    print("\nüîå –ï—Å–ª–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –Ω–µ—Ç:")
    print("   ‚Ä¢ –ü–∞—É—Ä–±–∞–Ω–∫ —Ä–∞–∑—Ä—è–∂–µ–Ω")
    print("   ‚Ä¢ –ü–ª–æ—Ö–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–≤–æ–¥–æ–≤")
    print("   ‚Ä¢ –°–ª–æ–º–∞–Ω–Ω—ã–π USB –∫–∞–±–µ–ª—å")
    
    print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
    print("   ‚Ä¢ –î—Ä—É–≥–æ–π –ø–∞—É—Ä–±–∞–Ω–∫")
    print("   ‚Ä¢ –î—Ä—É–≥–æ–π USB –∫–∞–±–µ–ª—å")
    print("   ‚Ä¢ 9V –±–∞—Ç–∞—Ä–µ–π–∫—É –≤–º–µ—Å—Ç–æ –ø–∞—É—Ä–±–∞–Ω–∫–∞")
    """–û—Ç–ª–∞–¥–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –º–æ—Ç–æ—Ä–∞"""
    print("\nüîã –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ò–¢–ê–ù–ò–Ø –ú–û–¢–û–†–ê")
    print("="*40)
    
    if not I2C_AVAILABLE:
        return
    
    try:
        driver = I2CServoDriver(channel=0)
        
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:")
        print("1. –ü–∞—É—Ä–±–∞–Ω–∫ –≤–∫–ª—é—á–µ–Ω –∏ –∑–∞—Ä—è–∂–µ–Ω?")
        print("2. USB –∫–∞–±–µ–ª—å –æ—Ç –ø–∞—É—Ä–±–∞–Ω–∫–∞ —Ä–∞–∑—Ä–µ–∑–∞–Ω?")
        print("3. –ö—Ä–∞—Å–Ω—ã–π –ø—Ä–æ–≤–æ–¥ ‚Üí PCA9685 V+ ?")
        print("4. –ß–µ—Ä–Ω—ã–π –ø—Ä–æ–≤–æ–¥ ‚Üí PCA9685 GND ?")
        print("5. –ú–æ—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–∞–Ω–∞–ª—É 0?")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç–µ...")
        
        print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è PWM...")
        
        # –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å–µ—Ä–≤–æ
        test_values = [
            (150, "–ú–∏–Ω–∏–º—É–º —Å–µ—Ä–≤–æ (0¬∞)"),
            (300, "–¶–µ–Ω—Ç—Ä —Å–µ—Ä–≤–æ (90¬∞)"),
            (450, "–ú–∞–∫—Å–∏–º—É–º —Å–µ—Ä–≤–æ (180¬∞)"),
            (0, "–í—ã–∫–ª—é—á–µ–Ω–æ")
        ]
        
        for value, description in test_values:
            print(f"üéØ –¢–µ—Å—Ç: {description} (PWM: {value})")
            driver.set_pwm(0, value)
            
            moved = input("–ú–æ—Ç–æ—Ä —Å–¥–≤–∏–Ω—É–ª—Å—è? (y/n): ").lower()
            if moved == 'y':
                print(f"‚úÖ –ú–æ—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ PWM {value}!")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ–∫–æ–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω...")
                for test_val in range(value-50, value+51, 25):
                    if test_val >= 0:
                        print(f"   PWM {test_val}")
                        driver.set_pwm(0, test_val)
                        time.sleep(1)
                return True
            
            time.sleep(2)
        
        print("‚ùå –ú–æ—Ç–æ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ")
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_continuous_servo():
    """–¢–µ—Å—Ç –¥–ª—è continuous rotation servo"""
    print("\nüîÑ –¢–ï–°–¢ CONTINUOUS ROTATION SERVO")
    print("="*40)
    
    if not I2C_AVAILABLE:
        return
    
    try:
        driver = I2CServoDriver(channel=0)
        
        print("üí° –î–ª—è continuous servo:")
        print("   ~1.5ms (307) = –°–¢–û–ü")
        print("   <1.5ms = –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –æ–¥–Ω—É —Å—Ç–æ—Ä–æ–Ω—É")  
        print("   >1.5ms = –≤—Ä–∞—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É")
        
        # –¢–µ—Å—Ç continuous rotation
        test_speeds = [
            (250, "–ë—ã—Å—Ç—Ä–æ –Ω–∞–∑–∞–¥"),
            (280, "–ú–µ–¥–ª–µ–Ω–Ω–æ –Ω–∞–∑–∞–¥"),
            (307, "–°–¢–û–ü"),
            (330, "–ú–µ–¥–ª–µ–Ω–Ω–æ –≤–ø–µ—Ä–µ–¥"),
            (360, "–ë—ã—Å—Ç—Ä–æ –≤–ø–µ—Ä–µ–¥"),
            (307, "–°–¢–û–ü —Ñ–∏–Ω–∞–ª—å–Ω—ã–π")
        ]
        
        for pwm, description in test_speeds:
            print(f"\nüéØ {description} (PWM: {pwm})")
            driver.set_pwm(0, pwm)
            
            time.sleep(3)
            moved = input("–ú–æ—Ç–æ—Ä –∫—Ä—É—Ç–∏—Ç—Å—è? (y/n): ").lower()
            if moved == 'y':
                print(f"‚úÖ Continuous servo —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ PWM {pwm}!")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞
        driver.set_pwm(0, 0)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def check_power_supply():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Ç–∞–Ω–∏—è"""
    print("\n‚ö° –ü–†–û–í–ï–†–ö–ê –ü–ò–¢–ê–ù–ò–Ø")
    print("="*30)
    
    print("üîã –ü–∞—É—Ä–±–∞–Ω–∫:")
    print("   ‚Ä¢ –í–∫–ª—é—á–µ–Ω –∏ –∑–∞—Ä—è–∂–µ–Ω?")
    print("   ‚Ä¢ LED –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ—Ä–∏—Ç?")
    print("   ‚Ä¢ –í—ã–¥–∞–µ—Ç 5V –Ω–∞ USB?")
    
    print("\nüîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –∫ PCA9685:")
    print("   ‚Ä¢ V+ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–∞—É—Ä–±–∞–Ω–∫—É (+)?")
    print("   ‚Ä¢ GND –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –ø–∞—É—Ä–±–∞–Ω–∫—É (-) –ò Pi GND?")
    print("   ‚Ä¢ –ü—Ä–æ–≤–æ–¥–∞ –Ω–∞–¥–µ–∂–Ω–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã?")
    
    print("\nüéØ –ú–æ—Ç–æ—Ä:")
    print("   ‚Ä¢ 3 –ø—Ä–æ–≤–æ–¥–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –∫–∞–Ω–∞–ª—É 0?")
    print("   ‚Ä¢ –≠—Ç–æ servo –º–æ—Ç–æ—Ä –∏–ª–∏ –æ–±—ã—á–Ω—ã–π DC?")
    print("   ‚Ä¢ –ú–æ—Ç–æ—Ä –∏—Å–ø—Ä–∞–≤–µ–Ω? (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Ä—É—á–Ω—É—é)")
    
    print("\nüí° –†–ï–®–ï–ù–ò–Ø:")
    print("1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π USB –∫–∞–±–µ–ª—å")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—Ä—è–¥ –ø–∞—É—Ä–±–∞–Ω–∫–∞")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ GND —Å–æ–µ–¥–∏–Ω–µ–Ω—ã")
    print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å LED –∫ –∫–∞–Ω–∞–ª—É 0 –¥–ª—è —Ç–µ—Å—Ç–∞")
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ I2C"""
    import os
    
    print("\nüîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê I2C")
    print("="*30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ /dev/i2c-1
    if os.path.exists('/dev/i2c-1'):
        print("‚úÖ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ: /dev/i2c-1")
    else:
        print("‚ùå I2C –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –í–∫–ª—é—á–∏—Ç–µ I2C:")
        print("   sudo raspi-config ‚Üí Interface Options ‚Üí I2C ‚Üí Yes")
        print("   sudo reboot")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ smbus
    try:
        import smbus
        print("‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ smbus –¥–æ—Å—Ç—É–ø–Ω–∞")
    except ImportError:
        print("‚ùå smbus –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install python3-smbus")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ i2c-tools
    if os.system("which i2cdetect > /dev/null 2>&1") == 0:
        print("‚úÖ i2c-tools —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: sudo i2cdetect -y 1")
    else:
        print("‚ö†Ô∏è  i2c-tools –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: sudo apt install i2c-tools")
    
    return True
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è PCA9685"""
    print("\nüîç –ü–†–û–í–ï–†–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø PCA9685")
    print("="*40)
    
    if not I2C_AVAILABLE:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ smbus: sudo apt install python3-smbus")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º I2C
        bus = smbus.SMBus(1)
        
        print("1Ô∏è‚É£  –ü–æ–∏—Å–∫ PCA9685 –ø–æ –∞–¥—Ä–µ—Å—É 0x40...")
        try:
            bus.read_byte_data(0x40, 0x00)
            print("‚úÖ PCA9685 –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0x40!")
        except:
            print("‚ùå PCA9685 –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É 0x40")
            
        print("\n2Ô∏è‚É£  –ü–æ–∏—Å–∫ –≤—Å–µ—Ö I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        devices = []
        for addr in range(0x08, 0x78):
            try:
                bus.read_byte(addr)
                devices.append(addr)
                print(f"   –ù–∞–π–¥–µ–Ω–æ: 0x{addr:02x}")
            except:
                pass
                
        if not devices:
            print("‚ùå I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
            print("   ‚Ä¢ I2C –≤–∫–ª—é—á–µ–Ω: sudo raspi-config")
            print("   ‚Ä¢ –ü—Ä–æ–≤–æ–¥–∞ SDA/SCL –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
            print("   ‚Ä¢ –ü–∏—Ç–∞–Ω–∏–µ VCC –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ I2C: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–≥–ª–∞ —Å–µ—Ä–≤–æ
def set_servo_angle(self, angle):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–≥–ª–∞ —Å–µ—Ä–≤–æ (0-180¬∞)"""
    angle = max(0, min(180, angle))
    
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–µ—Ä–≤–æ
    min_pulse = 150   # ~0.6ms –¥–ª—è 0¬∞
    max_pulse = 600   # ~2.4ms –¥–ª—è 180¬∞
    
    pulse_width = min_pulse + (angle / 180.0) * (max_pulse - min_pulse)
    self.set_pwm(0, int(pulse_width))
    
    print(f"üéØ –°–µ—Ä–≤–æ –∫–∞–Ω–∞–ª {self.channel}: {angle}¬∞")

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å I2CServoDriver
I2CServoDriver.set_servo_angle = set_servo_angle

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–û–¢–û–†–û–ú –ß–ï–†–ï–ó PCA9685")
    print("="*50)
    print("üìå –ü–†–ê–í–ò–õ–¨–ù–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï PCA9685:")
    print("   Pi Pin 2 (5V) ‚Üí PCA9685 VCC")
    print("   Pi Pin 6 (GND) ‚Üí PCA9685 GND") 
    print("   Pi Pin 3 (GPIO 2) ‚Üí PCA9685 SDA")
    print("   Pi Pin 5 (GPIO 3) ‚Üí PCA9685 SCL")
    print("   –ü–∞—É—Ä–±–∞–Ω–∫ USB+ ‚Üí PCA9685 V+")
    print("   –ü–∞—É—Ä–±–∞–Ω–∫ USB- ‚Üí PCA9685 GND")
    print("   –ú–æ—Ç–æ—Ä ‚Üí PCA9685 –∫–∞–Ω–∞–ª 0")
    print("‚ö†Ô∏è  GPIO 4 –∏ GPIO 12 –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è I2C!")
    
    choice = input("""
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:
1 - –¢–µ—Å—Ç I2C –¥—Ä–∞–π–≤–µ—Ä–∞ PCA9685 ‚≠ê
2 - –ü–æ–∏—Å–∫ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤
3 - –ü—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ
4 - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ I2C üîß
5 - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∏—Ç–∞–Ω–∏—è –º–æ—Ç–æ—Ä–∞ üîã (–ú–û–¢–û–† –ù–ï –ö–†–£–¢–ò–¢–°–Ø)
6 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –º–æ—Ç–æ—Ä–∞ üîç (–ï–°–õ–ò 5 –ù–ï –ü–û–ú–û–ì–õ–û)
7 - –¢–µ—Å—Ç —Å LED üí°
8 - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–æ—Ç–æ—Ä–∞ ü§ñ
9 - –¢–µ—Å—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è ‚ö°

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-9): """)
    
    try:
        if choice == "1":
            test_i2c_driver()
        elif choice == "2":
            scan_i2c()
        elif choice == "3":
            simple_servo_control()
        elif choice == "4":
            check_i2c_status()
            if I2C_AVAILABLE:
                check_pca9685_connection()
        elif choice == "5":
            debug_motor_power()
        elif choice == "6":
            advanced_motor_debug()
        elif choice == "7":
            test_power_with_led()
        elif choice == "8":
            check_motor_type()
        elif choice == "9":
            voltage_test()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ I2C —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            scan_i2c()
    
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        try:
            GPIO.cleanup()
        except:
            pass

if __name__ == "__main__":
    main()
    
    print("\nüí° –ï—Å–ª–∏ –º–æ—Ç–æ—Ä –Ω–µ –∫—Ä—É—Ç–∏—Ç—Å—è:")
    print("1. ‚ö†Ô∏è  –ò–°–ü–†–ê–í–¨–¢–ï –ü–ò–¢–ê–ù–ò–ï: 5V –ù–ï –≤ 0–µ!")
    print("2. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: 5V ‚Üí VCC –¥—Ä–∞–π–≤–µ—Ä–∞, GND ‚Üí GND –¥—Ä–∞–π–≤–µ—Ä–∞")
    print("3. –ü–∞—É—Ä–±–∞–Ω–∫ (+) ‚Üí VIN –¥—Ä–∞–π–≤–µ—Ä–∞, –ø–∞—É—Ä–±–∞–Ω–∫ (-) ‚Üí GND")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –º–æ—Ç–æ—Ä –Ω–∞ –∫–∞–Ω–∞–ª–µ 0")
    print("5. –î–ª—è I2C: sudo raspi-config ‚Üí Interface ‚Üí I2C ‚Üí Enable")