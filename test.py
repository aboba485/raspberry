import RPi.GPIO as GPIO
import time
import threading

class ServoMotor:
    def __init__(self, servo_pin=13):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–æ –º–æ—Ç–æ—Ä–æ–º –Ω–∞ GPIO 13
        
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:
        ‚Ä¢ –ö—Ä–∞—Å–Ω—ã–π (VCC) ‚Üí 5V Raspberry Pi
        ‚Ä¢ –ß–µ—Ä–Ω—ã–π/–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π (GND) ‚Üí Ground Raspberry Pi  
        ‚Ä¢ –ñ–µ–ª—Ç—ã–π/–û—Ä–∞–Ω–∂–µ–≤—ã–π (Signal) ‚Üí GPIO 13
        """
        self.servo_pin = servo_pin
        self.current_angle = 90
        self.is_running = False
        self.rotation_thread = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GPIO
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.servo_pin, GPIO.OUT)
        
        # PWM 50Hz –¥–ª—è —Å–µ—Ä–≤–æ
        self.pwm = GPIO.PWM(self.servo_pin, 50)
        self.pwm.start(0)
        
        print(f"ü§ñ –°–µ—Ä–≤–æ –º–æ—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ GPIO {self.servo_pin}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        self.move_to(90)
        time.sleep(1)
    
    def angle_to_duty_cycle(self, angle):
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É–≥–ª–∞ –≤ duty cycle –¥–ª—è PWM
        0¬∞ = 2.5%, 90¬∞ = 7.5%, 180¬∞ = 12.5%
        """
        angle = max(0, min(180, angle))
        duty_cycle = 2.5 + (angle / 180.0) * 10.0
        return duty_cycle
    
    def move_to(self, angle):
        """
        –ü–æ–≤–æ—Ä–æ—Ç —Å–µ—Ä–≤–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —É–≥–æ–ª (0-180¬∞)
        """
        angle = max(0, min(180, angle))
        duty_cycle = self.angle_to_duty_cycle(angle)
        
        self.pwm.ChangeDutyCycle(duty_cycle)
        self.current_angle = angle
        
        print(f"üéØ –°–µ—Ä–≤–æ: {angle}¬∞")
        time.sleep(0.5)  # –í—Ä–µ–º—è –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PWM –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞ (—ç–∫–æ–Ω–æ–º–∏—è —ç–Ω–µ—Ä–≥–∏–∏)
        self.pwm.ChangeDutyCycle(0)
    
    def sweep(self, start=0, end=180, step=5, delay=0.1):
        """
        –ü–ª–∞–≤–Ω–æ–µ –∫–∞—á–∞–Ω–∏–µ –º–µ–∂–¥—É —É–≥–ª–∞–º–∏
        """
        print(f"üîÑ –ö–∞—á–∞–Ω–∏–µ –æ—Ç {start}¬∞ –¥–æ {end}¬∞")
        
        # –¢—É–¥–∞
        for angle in range(start, end + 1, step):
            self.move_to(angle)
            time.sleep(delay)
        
        # –û–±—Ä–∞—Ç–Ω–æ
        for angle in range(end, start - 1, -step):
            self.move_to(angle)
            time.sleep(delay)
    
    def continuous_rotation(self, speed=1):
        """
        –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
        (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–µ—Ä–≤–æ - –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç 0 –¥–æ 180 –∏ –æ–±—Ä–∞—Ç–Ω–æ)
        """
        if self.is_running:
            print("‚ö†Ô∏è  –°–µ—Ä–≤–æ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return
        
        self.is_running = True
        
        def rotate():
            print("üîÑ –ù–∞—á–∏–Ω–∞—é –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ")
            while self.is_running:
                # –ü–æ–ª–Ω—ã–π –æ–±–æ—Ä–æ—Ç: 0¬∞ ‚Üí 180¬∞ ‚Üí 0¬∞
                for angle in range(0, 181, 5):
                    if not self.is_running:
                        break
                    self.move_to(angle)
                    time.sleep(0.05 / speed)
                
                for angle in range(180, -1, -5):
                    if not self.is_running:
                        break
                    self.move_to(angle)
                    time.sleep(0.05 / speed)
        
        self.rotation_thread = threading.Thread(target=rotate)
        self.rotation_thread.daemon = True
        self.rotation_thread.start()
    
    def stop_rotation(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤—Ä–∞—â–µ–Ω–∏—è
        """
        if self.is_running:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–∞—â–µ–Ω–∏—è")
            self.is_running = False
            if self.rotation_thread:
                self.rotation_thread.join()
    
    def center(self):
        """
        –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
        """
        print("üéØ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä")
        self.move_to(90)
    
    def test_basic_positions(self):
        """
        –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        """
        print("üîß –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
        positions = [0, 45, 90, 135, 180, 90]
        
        for pos in positions:
            print(f"üìç –ü–æ–∑–∏—Ü–∏—è: {pos}¬∞")
            self.move_to(pos)
            time.sleep(1)
    
    def arduino_sequence(self):
        """
        –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ Arduino –∫–æ–¥–∞
        """
        print("üéÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Arduino –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        time.sleep(2)
        self.move_to(90)
        
        time.sleep(2)
        self.move_to(180)
        
        time.sleep(2)
        self.move_to(0)
        
        print("‚úÖ Arduino –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def cleanup(self):
        """
        –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        """
        self.stop_rotation()
        self.pwm.stop()
        GPIO.cleanup()
        print("‚úÖ –°–µ—Ä–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω")

# –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def quick_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–µ—Ä–≤–æ
    """
    servo = ServoMotor(servo_pin=13)
    
    try:
        print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ï–†–í–û")
        servo.test_basic_positions()
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    finally:
        servo.cleanup()

def arduino_style():
    """
    –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ Arduino
    """
    servo = ServoMotor(servo_pin=13)
    
    try:
        print("üéÆ ARDUINO –°–¢–ò–õ–¨")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –∫–∞–∫ –≤ Arduino
        while True:
            servo.arduino_sequence()
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        servo.cleanup()

def continuous_spin():
    """
    –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
    """
    servo = ServoMotor(servo_pin=13)
    
    try:
        print("üîÑ –ù–ï–ü–†–ï–†–´–í–ù–û–ï –í–†–ê–©–ï–ù–ò–ï")
        servo.continuous_rotation(speed=2)
        
        # –ö—Ä—É—Ç–∏–º 10 —Å–µ–∫—É–Ω–¥
        time.sleep(10)
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        servo.cleanup()

# –û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
if __name__ == "__main__":
    print("ü§ñ –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ï–†–í–û –ú–û–¢–û–†–û–ú GPIO 13")
    print("=" * 50)
    print("üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:")
    print("   –ö—Ä–∞—Å–Ω—ã–π ‚Üí 5V")
    print("   –ß–µ—Ä–Ω—ã–π ‚Üí GND")  
    print("   –ñ–µ–ª—Ç—ã–π ‚Üí GPIO 13")
    print("=" * 50)
    
    choice = input("""
–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:
1 - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–∑–∏—Ü–∏–π
2 - Arduino —Å—Ç–∏–ª—å (–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª)
3 - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
4 - –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
5 - –ö–∞—á–∞–Ω–∏–µ

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): """)
    
    try:
        if choice == "1":
            quick_test()
            
        elif choice == "2":
            arduino_style()
            
        elif choice == "3":
            continuous_spin()
            
        elif choice == "4":
            # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            servo = ServoMotor(servo_pin=13)
            try:
                print("\nüéÆ –†–£–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï")
                print("–í–≤–µ–¥–∏—Ç–µ —É–≥–æ–ª (0-180) –∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞:")
                
                while True:
                    user_input = input("–£–≥–æ–ª: ").strip()
                    
                    if user_input.lower() == 'q':
                        break
                    
                    try:
                        angle = int(user_input)
                        servo.move_to(angle)
                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 180")
                        
            finally:
                servo.cleanup()
                
        elif choice == "5":
            # –ö–∞—á–∞–Ω–∏–µ
            servo = ServoMotor(servo_pin=13)
            try:
                print("\nüîÑ –†–ï–ñ–ò–ú –ö–ê–ß–ê–ù–ò–Ø")
                servo.sweep(start=30, end=150, step=3, delay=0.05)
                
            finally:
                servo.cleanup()
                
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
            quick_test()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        try:
            GPIO.cleanup()
        except:
            pass

# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def simple_move(angle):
    """
    –ü—Ä–æ—Å—Ç–æ–π –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ —É–≥–æ–ª
    """
    servo = ServoMotor(13)
    try:
        servo.move_to(angle)
        time.sleep(2)
    finally:
        servo.cleanup()

# –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
# simple_move(90)  # –ü–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞
# quick_test()     # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
# arduino_style()  # –ö–∞–∫ –≤ Arduino